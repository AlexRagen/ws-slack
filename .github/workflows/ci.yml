name: WS Slack integration
on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'
  schedule:
    - cron: '0 4 * * *'
jobs:
  Build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v2
      - uses: UnicornGlobal/trufflehog-actions-scan@master
        with:
          branch: ${{ github.head_ref }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --ignore=E501,F841
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Unittesting
        run: python -m unittest
      - name: confluence-markdown-sync - PS documentation
        if: github.ref == 'refs/heads/master'
        uses: cupcakearmy/confluence-markdown-sync@v1
        with:
          from: README.md
          to: 1864533219
          cloud: whitesource
          user: ${{ secrets.CONFLUENCE_USER }}
          token: ${{ secrets.CONFLUENCE_TOKEN }}
      - name: confluence-markdown-sync - Public Community
        if: github.ref == 'refs/heads/master'
        uses: cupcakearmy/confluence-markdown-sync@v1
        with:
          from: README.md
          to: 2319384637
          cloud: whitesource
          user: ${{ secrets.CONFLUENCE_USER }}
          token: ${{ secrets.CONFLUENCE_TOKEN }}
  Docker:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare tag
        id: prep
        run: |
          DOCKER_IMAGE=whitesourcetools/ws4s
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            TAGS="${DOCKER_IMAGE}:${VERSION}"
          elif [[ $GITHUB_REF == refs/heads/master ]]; then
            TAGS="${DOCKER_IMAGE}:latest"
          else
            TAGS="${DOCKER_IMAGE}:testing"
          fi
          echo ::set-output name=tags::${TAGS}
          echo "TAG NAME": $TAGS
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push to DockerHub
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.prep.outputs.tags }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
